class Solution {
public:
    string convert(string s, int numRows) {
        if (s.size() == 1 || numRows == 1) {
            return s;  // Handle edge cases
        }

        vector<string> rows(min(numRows, int(s.size())));  // Vector to store rows
        int currRow = 0;
        bool goingDown = false;

        // Build the result by filling rows with characters
        for (char c : s) {
            rows[currRow] += c;
            if (currRow == 0 || currRow == numRows - 1) {
                goingDown = !goingDown;  // Change direction at the top or bottom row
            }
            currRow += goingDown ? 1 : -1;  // Move up or down
        }

        // Concatenate all rows
        string result;
        for (const string& row : rows) {
            result += row;
        }

        return result;
    }
};
